{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ImprovedNoise.js","webpack:///./src/vertex-color+noise-vert.glsl","webpack:///./src/vertex-color+noise-frag.glsl","webpack:///./src/geometry-atoll-terrain.js","webpack:///./src/vertex-color+noise.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","fade","lerp","a","b","grad","hash","x","y","z","h","u","v","noise","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","AFRAME","registerGeometry","schema","buffer","type","default","plateauRadius","min","plateauElevation","middleRadius","unitSize","max","far","landYinColor","landYangColor","seaYinColor","seaYangColor","log","init","data","perlin","ImprovedNoise_default","SEED","Math","random","SQRT3HALF","sqrt","SIZE","round","UNIT_SIZE","PLATEAU_EDGE","INNER_RADIUS","OUTER_RADIUS","FAR","MASK_EDGE","SCAN_SIZE","ceil","LAND_YIN_COLOR","THREE","Color","LAND_YANG_COLOR","SEA_YIN_COLOR","SEA_YANG_COLOR","seaAverageColor","clone","BEACH_COLOR","ROCK_COLOR","console","vertices","positions","vertexLookup","vertexInd","j","quality","push","Vector3","pitColor","SCALE5","SCALE25","SCALE3","SCALE12","colors","vertexBehavior","Array","length","faceIndices","vertexAInd","vertexA","vertexBInd","vertexCInd","vertexDInd","neighbors","nearby","convolution","g","mix","color","land","sea","bufferGeometry","BufferGeometry","setIndex","addAttribute","Float32BufferAttribute","computeVertexNormals","this","geometry","registerShader","sunPosition","timeMsec","is","sunPos","material","ShaderMaterial","uniforms","sunNormal","normalize","wavesOffset","vertexShader","vertex_color_noise_vert_default","fragmentShader","vertex_color_noise_frag_default","update","time","sin","cos","registerPrimitive","defaultComponents","primitive","shader","vertexColors","mappings","plateau-radius","plateau-elevation","middle-radius","unit-size","land-yin-color","land-yang-color","sea-yin-color","sea-yang-color","sun-position","src","flat-shading"],"mappings":"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","file":"aframe-atoll-terrain.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","// http://mrl.nyu.edu/~perlin/noise/\n\nvar ImprovedNoise = function () {\n\n\tvar p = [ 151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,\n\t\t 23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,\n\t\t 174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,\n\t\t 133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,\n\t\t 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,\n\t\t 202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,\n\t\t 248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,\n\t\t 178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,\n\t\t 14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,\n\t\t 93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180 ];\n\n\tfor (var i = 0; i < 256 ; i ++) {\n\n\t\tp[256 + i] = p[i];\n\n\t}\n\n\tfunction fade(t) {\n\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\n\n\t}\n\n\tfunction lerp(t, a, b) {\n\n\t\treturn a + t * (b - a);\n\n\t}\n\n\tfunction grad(hash, x, y, z) {\n\n\t\tvar h = hash & 15;\n\t\tvar u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n\t\treturn ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n\n\t}\n\n\treturn {\n\n\t\tnoise: function (x, y, z) {\n\n\t\t\tvar floorX = ~~x, floorY = ~~y, floorZ = ~~z;\n\n\t\t\tvar X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;\n\n\t\t\tx -= floorX;\n\t\t\ty -= floorY;\n\t\t\tz -= floorZ;\n\n\t\t\tvar xMinus1 = x - 1, yMinus1 = y - 1, zMinus1 = z - 1;\n\n\t\t\tvar u = fade(x), v = fade(y), w = fade(z);\n\n\t\t\tvar A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z, B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;\n\n\t\t\treturn lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n\t\t\t\t\t\t\tgrad(p[BA], xMinus1, y, z)),\n\t\t\t\t\t\tlerp(u, grad(p[AB], x, yMinus1, z),\n\t\t\t\t\t\t\tgrad(p[BB], xMinus1, yMinus1, z))),\n\t\t\t\t\tlerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n\t\t\t\t\t\t\tgrad(p[BA + 1], xMinus1, y, z - 1)),\n\t\t\t\t\t\tlerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n\t\t\t\t\t\t\tgrad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n\t\t}\n\t}\n};\n\nmodule.exports = ImprovedNoise;\n","module.exports = \"// vertex-color+noise-vert.glsl - vertex shader\\n// Copyright © 2019 P. Douglas Reeder under the MIT License\\n\\nuniform vec3 sunNormal;\\nuniform vec3 wavesOffset;\\n\\nattribute float behavior;\\n\\nvarying vec3 interpColor;\\nvarying vec3 noisePosition;\\nvarying float sunFactor;\\n\\nvoid main() {\\n    interpColor = color;\\n\\n    const vec3 zero = vec3(0.0, 0.0, 0.0);\\n    noisePosition = position + ((behavior > 0.0) ? wavesOffset : zero);\\n\\n    sunFactor = 0.5 + max(dot(normal, sunNormal), 0.0);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\\n\"","module.exports = \"// vertex-color+noise-frag.glsl - fragment shader\\n// Copyright © 2019 P. Douglas Reeder under the MIT License, except as noted\\n\\nvarying vec3 interpColor;\\nvarying vec3 noisePosition;\\nvarying float sunFactor;\\n\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289(vec2 x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute(vec3 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise(vec2 v)\\n{\\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n    0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n    -0.577350269189626,  // -1.0 + 2.0 * C.x\\n    0.024390243902439); // 1.0 / 41.0\\n    // First corner\\n    vec2 i  = floor(v + dot(v, C.yy) );\\n    vec2 x0 = v -   i + dot(i, C.xx);\\n\\n    // Other corners\\n    vec2 i1;\\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n    //i1.y = 1.0 - i1.x;\\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n    // x1 = x0 - i1 + 1.0 * C.xx ;\\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n    vec4 x12 = x0.xyxy + C.xxzz;\\n    x12.xy -= i1;\\n\\n    // Permutations\\n    i = mod289(i); // Avoid truncation effects in permutation\\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n    m = m*m ;\\n    m = m*m ;\\n\\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n    vec3 h = abs(x) - 0.5;\\n    vec3 ox = floor(x + 0.5);\\n    vec3 a0 = x - ox;\\n\\n    // Normalise gradients implicitly by scaling m\\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n    // Compute final noise value at P\\n    vec3 g;\\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n    return 130.0 * dot(m, g);\\n}\\n// end Ashima Arts copyright\\n\\n\\n// by \\\"sam\\\" of \\\"lolengine\\\", apparently Public Domain\\nvec3 hsv2rgb(vec3 c)\\n{\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n// end \\\"sam\\\" of \\\"lolengine\\\"\\n\\n\\nvoid main() {\\n    float noise = snoise(noisePosition.xz) /* + snoise(noisePosition.xz*10.0) */;\\n\\n    const vec3 factor = vec3(1.0/65.0, 1.0/19.0, 1.0/6.55e4);\\n    const vec3 offsetHSV = vec3(0.5, 0.5, 0.5);\\n    vec3 noiseHSV = noise * factor + offsetHSV;\\n\\n    const vec3 offsetRGB = vec3(0.25, 0.5, 0.5);\\n    vec3 inherentColor = interpColor + hsv2rgb(noiseHSV) - offsetRGB;\\n\\n    gl_FragColor = vec4(inherentColor * sunFactor, 1.0);\\n}\\n\"","// geometry-atoll-terrain.js - geometry for aframe-atoll-terrain component\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n\nimport ImprovedNoise from './ImprovedNoise';\n\nAFRAME.registerGeometry('atoll-terrain', {\n    schema: {\n        buffer: {type: 'boolean', default: false},\n        plateauRadius: {type: 'number', default: 10, min: 0},\n        plateauElevation: {type: 'number', default: 1},\n        middleRadius: {type: 'number', default: 100, min: 10},\n        unitSize: {type: 'number', default: 1, min: 0.1, max: 1000},\n        far: {type: 'number', default: 4000},\n        landYinColor: {type: 'color', default: '#528d04'},\n        landYangColor: {type: 'color', default: '#278d53'},\n        seaYinColor: {type: 'color'},\n        seaYangColor: {type: 'color'},\n        log: {type: 'boolean', default: false}\n    },\n    init: function (data) {\n        const perlin = new ImprovedNoise();\n        const SEED = Math.random() * 100;\n        const SQRT3HALF = Math.sqrt(3) / 2;\n\n        const SIZE = Math.round(data.middleRadius / data.unitSize);\n        const UNIT_SIZE = data.middleRadius / SIZE;\n\n        const PLATEAU_EDGE = data.plateauRadius < data.middleRadius-UNIT_SIZE ? data.plateauRadius + UNIT_SIZE : data.middleRadius-UNIT_SIZE;\n\n        const INNER_RADIUS = (SIZE-1) * UNIT_SIZE + 0.0001;\n        const OUTER_RADIUS = (SIZE+1) * UNIT_SIZE + 0.0001;\n        const FAR = data.far > OUTER_RADIUS ? data.far : OUTER_RADIUS;\n        const MASK_EDGE = INNER_RADIUS / 4;\n        const SCAN_SIZE = Math.ceil(SIZE * 1.16);   // empirically determined\n\n        const LAND_YIN_COLOR = new THREE.Color(data.landYinColor);\n        const LAND_YANG_COLOR = new THREE.Color(data.landYangColor);\n        const SEA_YIN_COLOR = new THREE.Color(data.seaYinColor);\n        const SEA_YANG_COLOR = new THREE.Color(data.seaYangColor);\n        let seaAverageColor = SEA_YIN_COLOR.clone();\n        seaAverageColor.lerp(SEA_YANG_COLOR, 0.5);\n        const BEACH_COLOR = new THREE.Color(0x71615b);   // brownish-gray beach\n        const ROCK_COLOR = new THREE.Color(0x837E7C);   // granite\n\n        if (data.log) {\n            console.log(\"atoll-terrain\", \"PLATEAU_EDGE=\"+PLATEAU_EDGE, \"plateauElevation=\"+data.plateauElevation,\n                \"SIZE=\"+SIZE, \"SCAN_SIZE=\"+SCAN_SIZE, \"UNIT_SIZE=\"+UNIT_SIZE,\n                \"middleRadius=\"+data.middleRadius, \"FAR=\"+FAR);\n        }\n\n        let vertices = [];    // one element (THREE.Vector3) per vertex; temporary storage during generation\n        let positions = [];   // three elements (x,y,z) per vertex\n\n        // vertex locations\n        let vertexLookup = {};\n        vertexLookup[-SCAN_SIZE-1] = {};\n        let vertexInd = 0;\n        for (let i= -SCAN_SIZE; i<=SCAN_SIZE; ++i) {\n            vertexLookup[i] = {};\n            for (let j= -SCAN_SIZE; j<=SCAN_SIZE; ++j) {\n                let x = i * SQRT3HALF * UNIT_SIZE;\n                let z = (j - i/2) * UNIT_SIZE;\n                let r = Math.sqrt(x*x + z*z);\n                if (r <= OUTER_RADIUS) {\n                    let y;\n                    if (data.plateauRadius > 0 && r <= PLATEAU_EDGE) {\n                        y = data.plateauElevation;\n                    } else if (r <= INNER_RADIUS) {\n                        y = 10;\n                        // generates smooth noisy terrain\n                        for (let quality = 25; quality <= 1500; quality *= 5) {\n                            y += perlin.noise((x+data.middleRadius) / quality, (z+data.middleRadius) / quality, SEED) * Math.min(quality / 2, 150);\n                        }\n\n                        if (data.plateauRadius > 0) {\n                            y = data.plateauElevation + (y - data.plateauElevation) * Math.min(r - PLATEAU_EDGE, MASK_EDGE) / MASK_EDGE;\n                        }\n                        y *= Math.min(INNER_RADIUS - r, MASK_EDGE) / MASK_EDGE;\n\n                        if (y > 0) {\n                            let quality = 5;\n                            y += perlin.noise((x + data.middleRadius) / quality, (z + data.middleRadius) / quality, SEED) * quality / 2;\n                        }\n\n                        // flattens the bottom, so it's continuous with the plain\n                        if (y < 0) {\n                            y = 0;\n                        }\n                    } else if (r <= data.middleRadius) {\n                        y = 0;\n                    } else {\n                        x *= FAR / r;\n                        z *= FAR / r;\n                        y = 0;\n                    }\n\n                    vertexLookup[i][j] = vertexInd++;\n                    vertices.push(new THREE.Vector3(x, y, z));\n                    positions.push(x, y, z);\n                }\n            }\n        }\n        vertexLookup[SCAN_SIZE+1] = {};\n\n        // vertex colors & behaviors, and faces\n        let pitColor = new THREE.Color(0x404040);   // dark gray\n        pitColor.lerp(LAND_YIN_COLOR, 0.75);\n        const SCALE5 = UNIT_SIZE * 5, SCALE25 = UNIT_SIZE * 25;\n        const SCALE3 = UNIT_SIZE * 3, SCALE12 = UNIT_SIZE * 12;\n\n        let colors = [];   // three elements (r,g,b) per vertex\n\n        const BEHAVIOR_STATIONARY = 0;\n        const BEHAVIOR_WAVES = 10;\n        let vertexBehavior = new Array(vertices.length);   // one element (behavior enum) per vertex\n\n        let faceIndices = [];   // three elements (vertex indexes) per face\n\n        for (let i= -SCAN_SIZE; i<=SCAN_SIZE; ++i) {\n            for (let j = -SCAN_SIZE; j <= SCAN_SIZE; ++j) {\n                let vertexAInd = vertexLookup[i][j];\n                let vertexA = vertices[vertexAInd];\n                if (vertexA) {\n                    let vertexBInd = vertexLookup[i][j-1];\n                    let vertexCInd = vertexLookup[i-1][j-1];\n                    let vertexDInd = vertexLookup[i-1][j];\n                    if (vertexA.y > 0) {   // above sea level\n                        let neighbors = new Array(6);\n                        neighbors[0] = vertices[vertexBInd];\n                        neighbors[1] = vertices[vertexCInd];\n                        neighbors[2] = vertices[vertexDInd];\n                        neighbors[3] = vertices[vertexLookup[i][j + 1]];\n                        neighbors[4] = vertices[vertexLookup[i + 1][j + 1]];\n                        neighbors[5] = vertices[vertexLookup[i + 1][j]];\n                        let nearby = new Array(12);\n                        nearby[ 0] = vertices[vertexLookup[i  ][j-2]];\n                        nearby[ 1] = vertices[vertexLookup[i-1][j-2]];\n                        nearby[ 2] = vertices[vertexLookup[i-2][j-2]];\n                        nearby[ 3] = vertices[vertexLookup[i-2][j-1]];\n                        nearby[ 4] = vertices[vertexLookup[i-2][j  ]];\n                        nearby[ 5] = vertices[vertexLookup[i-1][j+1]];\n                        nearby[ 6] = vertices[vertexLookup[i  ][j+2]];\n                        nearby[ 7] = vertices[vertexLookup[i+1][j+2]];\n                        nearby[ 8] = vertices[vertexLookup[i+2][j+2]];\n                        nearby[ 9] = vertices[vertexLookup[i+2][j+1]];\n                        nearby[10] = vertices[vertexLookup[i+2][j  ]];\n                        nearby[11] = vertices[vertexLookup[i+1][j-1]];\n                        let convolution = vertexA.y * 7;   // 1 extra to skew toward higher elevations\n                        for (let p=0; p<6; ++p) {\n                            convolution += neighbors[p].y * 3;\n                        }\n                        for (let p=0; p<12; ++p) {\n                            convolution += nearby[p].y * -2;\n                        }\n                        if (convolution > 70) {   // local peak and/or high elevation\n                            colors.push(ROCK_COLOR.r, ROCK_COLOR.g, ROCK_COLOR.b);\n                        } else {\n                            let mix = (1.73205 + perlin.noise((vertexA.x + data.middleRadius) / SCALE5, (vertexA.z + data.middleRadius) / SCALE5, SEED)\n                                + perlin.noise((vertexA.x + data.middleRadius) / SCALE25, (vertexA.z + data.middleRadius) / SCALE25, SEED)) / 3.4641;\n                            let color = LAND_YIN_COLOR.clone();\n                            color.lerp(LAND_YANG_COLOR, mix);\n                            colors.push(color.r, color.g, color.b);\n                        }\n                        vertexBehavior[vertexAInd] = BEHAVIOR_STATIONARY;\n                    } else {   // sea level\n                        let r = Math.sqrt(vertexA.x*vertexA.x + vertexA.z*vertexA.z);\n                        if (r > INNER_RADIUS) {\n                            colors.push(seaAverageColor.r, seaAverageColor.g, seaAverageColor.b);\n                            vertexBehavior[vertexAInd] = BEHAVIOR_WAVES;\n                        } else {\n                            let neighbors = [];\n                            neighbors[0] = vertices[vertexBInd];\n                            neighbors[1] = vertices[vertexCInd];\n                            neighbors[2] = vertices[vertexDInd];\n                            neighbors[3] = vertices[vertexLookup[i][j + 1]];\n                            neighbors[4] = vertices[vertexLookup[i + 1][j + 1]];\n                            neighbors[5] = vertices[vertexLookup[i + 1][j]];\n                            let land = 0, sea = 0;\n                            for (let n = 0; n < 6; ++n) {\n                                if (neighbors[n]) {\n                                    if (neighbors[n].y > 0) {\n                                        ++land;\n                                    } else {\n                                        ++sea;\n                                    }\n                                }\n                            }\n                            if (land === 0) {   // away from shore\n                                let mix = (1.73205 + perlin.noise((vertexA.x+FAR) / SCALE3, (vertexA.z+FAR) / SCALE3, SEED)\n                                    + perlin.noise((vertexA.x+FAR) / SCALE12, (vertexA.z+FAR) / SCALE12, SEED)) / 3.4641;\n                                let color = SEA_YIN_COLOR.clone();\n                                color.lerp(SEA_YANG_COLOR, mix);\n                                colors.push(color.r, color.g, color.b);\n                                vertexBehavior[vertexAInd] = BEHAVIOR_WAVES;\n                            } else if (sea === 0) {   // pit completely surrounded by land\n                                colors.push(pitColor.r, pitColor.g, pitColor.b);\n                                vertexBehavior[vertexAInd] = BEHAVIOR_STATIONARY;\n                            } else {\n                                let color = BEACH_COLOR.clone();\n                                color.lerp(LAND_YIN_COLOR, land / (land+sea));\n                                colors.push(color.r, color.g, color.b);\n                                vertexBehavior[vertexAInd] = BEHAVIOR_STATIONARY;\n                            }\n                        }\n                    }\n                    if (typeof vertexBInd !== 'undefined' && typeof vertexCInd !== 'undefined') {\n                        faceIndices.push(vertexAInd, vertexBInd, vertexCInd);\n                    }\n                    if (typeof vertexCInd !== 'undefined' && typeof vertexDInd !== 'undefined') {\n                        faceIndices.push(vertexAInd, vertexCInd, vertexDInd);\n                    }\n                }\n            }\n        }\n\n\n        // console.log(\"positions.length=\"+positions.length,\n        //     \"colors.length=\"+colors.length, \"behavior.length=\"+behavior.length);\n\n        let bufferGeometry = new THREE.BufferGeometry();\n        bufferGeometry.setIndex(faceIndices);\n        bufferGeometry.addAttribute('position', new THREE.Float32BufferAttribute( positions, 3 ) );\n        bufferGeometry.computeVertexNormals();\n        // geometry.computeBoundingBox();\n        bufferGeometry.addAttribute('color', new THREE.Float32BufferAttribute( colors, 3 ) );\n        bufferGeometry.addAttribute('behavior', new THREE.Float32BufferAttribute(vertexBehavior,  1));\n        this.geometry = bufferGeometry;\n    }\n});\n","// vertex-color+noise.js - an A-Frame material which interpolates the vertex colors and then adds noise\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n\nimport vertexShader from './vertex-color+noise-vert.glsl'\nimport fragmentShader from './vertex-color+noise-frag.glsl'\n\nAFRAME.registerShader('vertex-color+noise', {\n    schema: {\n        sunPosition: {type: 'vec3', default: {x:-1.0, y:1.0, z:-1.0}},\n        timeMsec: {type: 'time', is: 'uniform'}\n    },\n\n    /**\n     * `init` used to initialize material. Called once.\n     */\n    init: function (data) {\n        // console.log(\"material-vertex-color+noise data:\", data);\n        let sunPos = new THREE.Vector3(data.sunPosition.x, data.sunPosition.y, data.sunPosition.z);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: {\n                sunNormal: {value: sunPos.normalize()},\n                wavesOffset: {type: 'vec3', value: {x:0, y:0, z:0}},\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader\n        });\n    },\n\n    /**\n     * `update` used to update the material. Called on initialization and when data updates.\n     */\n    update: function (data) {\n        if (data.sunPosition) {\n            let sunPos = new THREE.Vector3(data.sunPosition.x, data.sunPosition.y, data.sunPosition.z);\n            this.material.uniforms.sunNormal.value = sunPos.normalize();\n        }\n        if (data.timeMsec) {\n            let time = data.timeMsec / 1000;\n            this.material.uniforms.wavesOffset.value = new THREE.Vector3(Math.sin(time), 0.0, Math.cos(time*1.33333));\n        }\n    },\n});\n","// aframe-atoll-terrain - An A-Frame WebVR primitive with high-resolution terrain surrounded by a low-res sea or plain\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n// Uses equilateral triangles in the high-res area & colors vertexes with sea color at elevation 0\n\nimport GeometryAtollTerrain from './geometry-atoll-terrain';\n\nimport MaterialVertexColorPlusNoise from './vertex-color+noise'\n\nAFRAME.registerPrimitive('a-atoll-terrain', {\n    defaultComponents: {\n        geometry: {\n            primitive: 'atoll-terrain',\n            middleRadius: 100,\n            unitSize: 1,\n            log: false\n        },\n        material: {\n            shader: 'vertex-color+noise',\n            vertexColors: 'vertex'\n        }\n    },\n\n    mappings: {\n        'plateau-radius': 'geometry.plateauRadius',\n        'plateau-elevation': 'geometry.plateauElevation',\n        'middle-radius': 'geometry.middleRadius',\n        'unit-size': 'geometry.unitSize',\n        'far': 'geometry.far',\n        'log': 'geometry.log',\n        'shader': 'material.shader',\n        'land-yin-color': 'geometry.landYinColor',\n        'land-yang-color': 'geometry.landYangColor',\n        'sea-yin-color': 'geometry.seaYinColor',\n        'sea-yang-color': 'geometry.seaYangColor',\n        'sun-position': 'material.sunPosition',\n        'src': 'material.src',\n        'flat-shading': 'material.flatShading'\n    }\n});\n"],"sourceRoot":""}