{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ImprovedNoise.js","webpack:///./src/vertex-color+noise-vert.glsl","webpack:///./src/vertex-color+noise-frag.glsl","webpack:///./src/geometry-atoll-terrain.js","webpack:///./src/vertex-color+noise.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","fade","lerp","a","b","grad","hash","x","y","z","h","u","v","noise","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","AFRAME","registerGeometry","schema","middleRadius","type","default","min","unitSize","max","far","landYinColor","landYangColor","seaYinColor","seaYangColor","log","init","data","perlin","ImprovedNoise_default","SEED","Math","random","SQRT3HALF","sqrt","SIZE","round","UNIT_SIZE","INNER_RADIUS","OUTER_RADIUS","FAR","PLATEAU_EDGE","SCAN_SIZE","ceil","LAND_YIN_COLOR","THREE","Color","LAND_YANG_COLOR","SEA_YIN_COLOR","SEA_YANG_COLOR","seaAverageColor","clone","console","geometry","Geometry","vertexLookup","vertexInd","j","quality","vertices","push","Vector3","pitColor","SCALE5","SCALE25","SCALE3","SCALE12","vertexColor","vertex","mix","color","neighbors","land","sea","vertexAInd","vertexBInd","vertexCInd","vertexDInd","face","Face3","vertexColors","faces","computeBoundingBox","mergeVertices","computeFaceNormals","computeVertexNormals","this","registerShader","sunPosition","sunPos","material","ShaderMaterial","uniforms","sunNormal","normalize","vertexShader","vertex_color_noise_vert_default","fragmentShader","vertex_color_noise_frag_default","update","registerPrimitive","defaultComponents","primitive","shader","mappings","middle-radius","unit-size","land-yin-color","land-yang-color","sea-yin-color","sea-yang-color","sun-position","src","flat-shading"],"mappings":"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","file":"aframe-atoll-terrain.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","// http://mrl.nyu.edu/~perlin/noise/\n\nvar ImprovedNoise = function () {\n\n\tvar p = [ 151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,\n\t\t 23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,\n\t\t 174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,\n\t\t 133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,\n\t\t 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,\n\t\t 202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,\n\t\t 248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,\n\t\t 178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,\n\t\t 14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,\n\t\t 93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180 ];\n\n\tfor (var i = 0; i < 256 ; i ++) {\n\n\t\tp[256 + i] = p[i];\n\n\t}\n\n\tfunction fade(t) {\n\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\n\n\t}\n\n\tfunction lerp(t, a, b) {\n\n\t\treturn a + t * (b - a);\n\n\t}\n\n\tfunction grad(hash, x, y, z) {\n\n\t\tvar h = hash & 15;\n\t\tvar u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n\t\treturn ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n\n\t}\n\n\treturn {\n\n\t\tnoise: function (x, y, z) {\n\n\t\t\tvar floorX = ~~x, floorY = ~~y, floorZ = ~~z;\n\n\t\t\tvar X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;\n\n\t\t\tx -= floorX;\n\t\t\ty -= floorY;\n\t\t\tz -= floorZ;\n\n\t\t\tvar xMinus1 = x - 1, yMinus1 = y - 1, zMinus1 = z - 1;\n\n\t\t\tvar u = fade(x), v = fade(y), w = fade(z);\n\n\t\t\tvar A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z, B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;\n\n\t\t\treturn lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n\t\t\t\t\t\t\tgrad(p[BA], xMinus1, y, z)),\n\t\t\t\t\t\tlerp(u, grad(p[AB], x, yMinus1, z),\n\t\t\t\t\t\t\tgrad(p[BB], xMinus1, yMinus1, z))),\n\t\t\t\t\tlerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n\t\t\t\t\t\t\tgrad(p[BA + 1], xMinus1, y, z - 1)),\n\t\t\t\t\t\tlerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n\t\t\t\t\t\t\tgrad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n\t\t}\n\t}\n};\n\nmodule.exports = ImprovedNoise;\n","module.exports = \"// vertex-color+noise-vert.glsl - vertex shader\\n// Copyright © 2019 P. Douglas Reeder under the MIT License\\n\\nuniform vec3 sunNormal;\\n\\nvarying vec3 interpColor;\\nvarying vec3 interpPosition;\\nvarying float sunFactor;\\n\\nvoid main() {\\n    interpColor = color;\\n    interpPosition = position;\\n\\n    sunFactor = 0.5 + max(dot(normal, sunNormal), 0.0);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\\n\"","module.exports = \"// vertex-color+noise-frag.glsl - fragment shader\\n// Copyright © 2019 P. Douglas Reeder under the MIT License, except as noted\\n\\nvarying vec3 interpColor;\\nvarying vec3 interpPosition;\\nvarying float sunFactor;\\n\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n    return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n{\\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n    // First corner\\n    vec3 i  = floor(v + dot(v, C.yyy) );\\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n    // Other corners\\n    vec3 g = step(x0.yzx, x0.xyz);\\n    vec3 l = 1.0 - g;\\n    vec3 i1 = min( g.xyz, l.zxy );\\n    vec3 i2 = max( g.xyz, l.zxy );\\n\\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n    vec3 x1 = x0 - i1 + C.xxx;\\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n    // Permutations\\n    i = mod289(i);\\n    vec4 p = permute( permute( permute(\\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n    float n_ = 0.142857142857; // 1.0/7.0\\n    vec3  ns = n_ * D.wyz - D.xzx;\\n\\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n    vec4 x_ = floor(j * ns.z);\\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n    vec4 x = x_ *ns.x + ns.yyyy;\\n    vec4 y = y_ *ns.x + ns.yyyy;\\n    vec4 h = 1.0 - abs(x) - abs(y);\\n\\n    vec4 b0 = vec4( x.xy, y.xy );\\n    vec4 b1 = vec4( x.zw, y.zw );\\n\\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n    vec4 s0 = floor(b0)*2.0 + 1.0;\\n    vec4 s1 = floor(b1)*2.0 + 1.0;\\n    vec4 sh = -step(h, vec4(0.0));\\n\\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n    vec3 p0 = vec3(a0.xy,h.x);\\n    vec3 p1 = vec3(a0.zw,h.y);\\n    vec3 p2 = vec3(a1.xy,h.z);\\n    vec3 p3 = vec3(a1.zw,h.w);\\n\\n    //Normalise gradients\\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n    p0 *= norm.x;\\n    p1 *= norm.y;\\n    p2 *= norm.z;\\n    p3 *= norm.w;\\n\\n    // Mix final noise value\\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n    m = m * m;\\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n    dot(p2,x2), dot(p3,x3) ) );\\n}\\n// end Ashima Arts copyright\\n\\n\\n// by \\\"sam\\\" of \\\"lolengine\\\"\\nvec3 rgb2hsv(vec3 c)\\n{\\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\n\\n    float d = q.x - min(q.w, q.y);\\n    float e = 1.0e-10;\\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\\n\\nvec3 hsv2rgb(vec3 c)\\n{\\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n// end \\\"sam\\\" of \\\"lolengine\\\"\\n\\n\\nvoid main() {\\n    vec3 hsv = rgb2hsv(interpColor);\\n\\n    float noise = snoise(interpPosition) /* + snoise(interpPosition*10.0) */;\\n    const vec2 landDivisor = vec2(30.0, 10.0);\\n    const vec2 seaDivisor = vec2(200.0, 30.0);\\n    hsv.xy += noise / (interpPosition.y > 1.0 ? landDivisor : seaDivisor);\\n\\n    vec3 inherentColor = hsv2rgb(hsv);\\n\\n    gl_FragColor = vec4(inherentColor * sunFactor, 1.0);\\n}\\n\"","// geometry-atoll-terrain.js - geometry for aframe-atoll-terrain component\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n\nimport ImprovedNoise from './ImprovedNoise';\n\nAFRAME.registerGeometry('atoll-terrain', {\n    schema: {\n        middleRadius: {type: 'number', default: 100, min: 10},\n        unitSize: {type: 'number', default: 1, min: 0.1, max: 1000},\n        far: {type: 'number', default: 4000},\n        landYinColor: {type: 'color', default: '#528d04'},\n        landYangColor: {type: 'color', default: '#278d53'},\n        seaYinColor: {type: 'color'},\n        seaYangColor: {type: 'color'},\n        log: {type: 'boolean', default: false}\n    },\n    init: function (data) {\n        const perlin = new ImprovedNoise();\n        const SEED = Math.random() * 100;\n        const SQRT3HALF = Math.sqrt(3) / 2;\n\n        const SIZE = Math.round(data.middleRadius / data.unitSize);\n        const UNIT_SIZE = data.middleRadius / SIZE;\n\n        const INNER_RADIUS = (SIZE-1) * UNIT_SIZE + 0.0001;\n        const OUTER_RADIUS = (SIZE+1) * UNIT_SIZE + 0.0001;\n        const FAR = data.far > OUTER_RADIUS ? data.far : OUTER_RADIUS;\n        const PLATEAU_EDGE = INNER_RADIUS / 4;\n        const SCAN_SIZE = Math.ceil(SIZE * 1.16);   // empirically determined\n\n        const LAND_YIN_COLOR = new THREE.Color(data.landYinColor);\n        const LAND_YANG_COLOR = new THREE.Color(data.landYangColor);\n        const SEA_YIN_COLOR = new THREE.Color(data.seaYinColor);\n        const SEA_YANG_COLOR = new THREE.Color(data.seaYangColor);\n        let seaAverageColor = SEA_YIN_COLOR.clone();\n        seaAverageColor.lerp(SEA_YANG_COLOR, 0.5);\n\n        if (data.log) {\n            console.log(\"atoll-terrain\", \"SIZE=\"+SIZE, \"SCAN_SIZE=\"+SCAN_SIZE, \"UNIT_SIZE=\"+UNIT_SIZE,\n                \"middleRadius=\"+data.middleRadius, \"FAR=\"+FAR);\n        }\n\n        let geometry = new THREE.Geometry();\n\n        // vertex locations\n        let vertexLookup = {};\n        vertexLookup[-SCAN_SIZE-1] = {};\n        let vertexInd = 0;\n        for (let i= -SCAN_SIZE; i<=SCAN_SIZE; ++i) {\n            vertexLookup[i] = {};\n            for (let j= -SCAN_SIZE; j<=SCAN_SIZE; ++j) {\n                let x = i * SQRT3HALF * UNIT_SIZE;\n                let z = (j - i/2) * UNIT_SIZE;\n                let r = Math.sqrt(x*x + z*z);\n                if (r <= OUTER_RADIUS) {\n                    let y;\n                    if (r <= INNER_RADIUS) {\n                        y = 10;\n                        // generates smooth noisy terrain\n                        for (let quality = 25; quality <= 1500; quality *= 5) {\n                            y += perlin.noise((x+data.middleRadius) / quality, (z+data.middleRadius) / quality, SEED) * Math.min(quality / 2, 150);\n                        }\n\n                        y *= Math.min(INNER_RADIUS - r, PLATEAU_EDGE) / PLATEAU_EDGE;\n\n                        if (y > 0) {\n                            let quality = 5;\n                            y += perlin.noise((x + data.middleRadius) / quality, (z + data.middleRadius) / quality, SEED) * quality / 2;\n                        }\n\n                        // flattens the bottom, so it's continuous with the plain\n                        if (y < 0) {\n                            y = 0;\n                        }\n                    } else if (r <= data.middleRadius) {\n                        y = 0;\n                    } else {\n                        x *= FAR / r;\n                        z *= FAR / r;\n                        y = 0;\n                    }\n\n                    vertexLookup[i][j] = vertexInd++;\n                    geometry.vertices.push(new THREE.Vector3(x, y, z));\n                }\n            }\n        }\n        vertexLookup[SCAN_SIZE+1] = {};\n\n        // vertex colors\n        let pitColor = new THREE.Color(0x404040);   // dark gray\n        pitColor.lerp(LAND_YIN_COLOR, 0.75);\n        const SCALE5 = UNIT_SIZE * 5, SCALE25 = UNIT_SIZE * 25;\n        const SCALE3 = UNIT_SIZE * 3, SCALE12 = UNIT_SIZE * 12;\n\n        let vertexColor = {};\n        for (let i= -SCAN_SIZE; i<=SCAN_SIZE; ++i) {\n            vertexColor[i] = {};\n            for (let j = -SCAN_SIZE; j <= SCAN_SIZE; ++j) {\n                let vertex = geometry.vertices[vertexLookup[i][j]];\n                if (vertex) {\n                    if (vertex.y > 0) {   // above sea level\n                        let mix = (1.73205 + perlin.noise((vertex.x+data.middleRadius) / SCALE5, (vertex.z+data.middleRadius) / SCALE5, SEED)\n                            + perlin.noise((vertex.x+data.middleRadius) / SCALE25, (vertex.z+data.middleRadius) / SCALE25, SEED)) / 3.4641;\n                        let color = LAND_YIN_COLOR.clone();\n                        vertexColor[i][j] = color.lerp(LAND_YANG_COLOR, mix);\n                    } else {   // sea level\n                        let r = Math.sqrt(vertex.x*vertex.x + vertex.z*vertex.z);\n                        if (r > INNER_RADIUS) {\n                            vertexColor[i][j] = seaAverageColor;\n                        } else {\n                            let neighbors = [];\n                            neighbors[0] = geometry.vertices[vertexLookup[i][j - 1]];\n                            neighbors[1] = geometry.vertices[vertexLookup[i - 1][j - 1]];\n                            neighbors[2] = geometry.vertices[vertexLookup[i - 1][j]];\n                            neighbors[3] = geometry.vertices[vertexLookup[i][j + 1]];\n                            neighbors[4] = geometry.vertices[vertexLookup[i + 1][j + 1]];\n                            neighbors[5] = geometry.vertices[vertexLookup[i + 1][j]];\n                            let land = 0, sea = 0;\n                            for (let n = 0; n < 6; ++n) {\n                                if (neighbors[n]) {\n                                    if (neighbors[n].y > 0) {\n                                        ++land;\n                                    } else {\n                                        ++sea;\n                                    }\n                                }\n                            }\n                            if (land === 0) {   // away from shore\n                                let mix = (1.73205 + perlin.noise((vertex.x+FAR) / SCALE3, (vertex.z+FAR) / SCALE3, SEED)\n                                    + perlin.noise((vertex.x+FAR) / SCALE12, (vertex.z+FAR) / SCALE12, SEED)) / 3.4641;\n                                let color = SEA_YIN_COLOR.clone();\n                                vertexColor[i][j] = color.lerp(SEA_YANG_COLOR, mix);\n                            } else if (sea === 0) {   // pit completely surrounded by land\n                                vertexColor[i][j] = pitColor;\n                            } else {\n                                let color = new THREE.Color(0x71615b);   // brownish-gray beach\n                                color.lerp(LAND_YIN_COLOR, land / (land+sea));\n                                vertexColor[i][j] = color;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // faces\n        for (let i= -SCAN_SIZE; i<=SCAN_SIZE; ++i) {\n            for (let j = -SCAN_SIZE; j <= SCAN_SIZE; ++j) {\n                let vertexAInd = vertexLookup[i][j];\n                if (geometry.vertices[vertexAInd]) {\n                    let vertexBInd = vertexLookup[i][j-1];\n\n                    let vertexCInd = vertexLookup[i-1][j-1];\n\n                    let vertexDInd = vertexLookup[i-1][j];\n\n                    if (typeof vertexBInd !== 'undefined' && typeof vertexCInd !== 'undefined') {\n                        let face = new THREE.Face3(vertexAInd, vertexBInd, vertexCInd);\n                        face.vertexColors[0] = vertexColor[i  ][j  ];\n                        face.vertexColors[1] = vertexColor[i  ][j-1];\n                        face.vertexColors[2] = vertexColor[i-1][j-1];\n\n                        geometry.faces.push(face);\n                    }\n                    if (typeof vertexCInd !== 'undefined' && typeof vertexDInd !== 'undefined') {\n                        let face = new THREE.Face3(vertexAInd, vertexCInd, vertexDInd);\n                        face.vertexColors[0] = vertexColor[i  ][j  ];\n                        face.vertexColors[1] = vertexColor[i-1][j-1];\n                        face.vertexColors[2] = vertexColor[i-1][j  ];\n\n                        geometry.faces.push(face);\n                    }\n                }\n            }\n        }\n\n        geometry.computeBoundingBox();\n        geometry.mergeVertices();\n        geometry.computeFaceNormals();\n        geometry.computeVertexNormals();\n        this.geometry = geometry;\n    }\n});\n","// vertex-color+noise.js - an A-Frame material which interpolates the vertex colors and then adds noise\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n\nimport vertexShader from './vertex-color+noise-vert.glsl'\nimport fragmentShader from './vertex-color+noise-frag.glsl'\n\nAFRAME.registerShader('vertex-color+noise', {\n    schema: {\n        sunPosition: {type: 'vec3', default: {x:-1.0, y:1.0, z:-1.0}}\n    },\n\n    /**\n     * `init` used to initialize material. Called once.\n     */\n    init: function (data) {\n        // console.log(\"material-vertex-color+noise data:\", data);\n        let sunPos = new THREE.Vector3(data.sunPosition.x, data.sunPosition.y, data.sunPosition.z);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: {\n                sunNormal: {value: sunPos.normalize()}\n            },\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader\n        });\n    },\n\n    /**\n     * `update` used to update the material. Called on initialization and when data updates.\n     */\n    update: function (data) {\n        let sunPos = new THREE.Vector3(data.sunPosition.x, data.sunPosition.y, data.sunPosition.z);\n        this.material.uniforms.sunNormal.value = sunPos.normalize();\n    },\n});\n","// aframe-atoll-terrain - An A-Frame WebVR primitive with high-resolution terrain surrounded by a low-res sea or plain\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n// Uses equilateral triangles in the high-res area & colors vertexes with sea color at elevation 0\n\nimport GeometryAtollTerrain from './geometry-atoll-terrain';\n\nimport MaterialVertexColorPlusNoise from './vertex-color+noise'\n\nAFRAME.registerPrimitive('a-atoll-terrain', {\n    defaultComponents: {\n        geometry: {\n            primitive: 'atoll-terrain',\n            middleRadius: 100,\n            unitSize: 1,\n            log: false\n        },\n        material: {\n            shader: 'vertex-color+noise',\n            vertexColors: 'vertex'\n        }\n    },\n\n    mappings: {\n        'middle-radius': 'geometry.middleRadius',\n        'unit-size': 'geometry.unitSize',\n        'far': 'geometry.far',\n        'log': 'geometry.log',\n        'shader': 'material.shader',\n        'land-yin-color': 'geometry.landYinColor',\n        'land-yang-color': 'geometry.landYangColor',\n        'sea-yin-color': 'geometry.seaYinColor',\n        'sea-yang-color': 'geometry.seaYangColor',\n        'sun-position': 'material.sunPosition',\n        'src': 'material.src',\n        'flat-shading': 'material.flatShading'\n    }\n});\n"],"sourceRoot":""}