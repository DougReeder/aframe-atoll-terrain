!function(e){var n={};function t(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(o,i,function(n){return e[n]}.bind(null,i));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=3)}([function(e,n){e.exports=function(){for(var e=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],n=0;n<256;n++)e[256+n]=e[n];function t(e){return e*e*e*(e*(6*e-15)+10)}function o(e,n,t){return n+e*(t-n)}function i(e,n,t,o){var i=15&e,r=i<8?n:t,a=i<4?t:12==i||14==i?n:o;return(0==(1&i)?r:-r)+(0==(2&i)?a:-a)}return{noise:function(n,r,a){var l=~~n,s=~~r,u=~~a,d=255&l,c=255&s,f=255&u,m=(n-=l)-1,p=(r-=s)-1,v=(a-=u)-1,x=t(n),y=t(r),g=t(a),h=e[d]+c,E=e[h]+f,C=e[h+1]+f,R=e[d+1]+c,b=e[R]+f,M=e[R+1]+f;return o(g,o(y,o(x,i(e[E],n,r,a),i(e[b],m,r,a)),o(x,i(e[C],n,p,a),i(e[M],m,p,a))),o(y,o(x,i(e[E+1],n,r,v),i(e[b+1],m,r,a-1)),o(x,i(e[C+1],n,p,v),i(e[M+1],m,p,v))))}}}},function(e,n){e.exports="// vertex-color+noise-vert.glsl - vertex shader\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n\nuniform vec3 sunNormal;\nuniform vec3 wavesOffset;\n\nattribute float behavior;\n\nvarying vec3 interpColor;\nvarying vec3 noisePosition;\nvarying float sunFactor;\n\nvoid main() {\n    interpColor = color;\n\n    const vec3 zero = vec3(0.0, 0.0, 0.0);\n    noisePosition = position + ((behavior > 0.0) ? wavesOffset : zero);\n\n    sunFactor = 0.5 + max(dot(normal, sunNormal), 0.0);\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n"},function(e,n){e.exports='// vertex-color+noise-frag.glsl - fragment shader\n// Copyright © 2019 P. Douglas Reeder under the MIT License, except as noted\n\nvarying vec3 interpColor;\nvarying vec3 noisePosition;\nvarying float sunFactor;\n\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n    0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n    -0.577350269189626,  // -1.0 + 2.0 * C.x\n    0.024390243902439); // 1.0 / 41.0\n    // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n// end Ashima Arts copyright\n\n\n// by "sam" of "lolengine", apparently Public Domain\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n// end "sam" of "lolengine"\n\n\nvoid main() {\n    float noise = snoise(noisePosition.xz) /* + snoise(noisePosition.xz*10.0) */;\n\n    const vec3 factor = vec3(1.0/65.0, 1.0/19.0, 1.0/6.55e4);\n    const vec3 offsetHSV = vec3(0.5, 0.5, 0.5);\n    vec3 noiseHSV = noise * factor + offsetHSV;\n\n    const vec3 offsetRGB = vec3(0.25, 0.5, 0.5);\n    vec3 inherentColor = interpColor + hsv2rgb(noiseHSV) - offsetRGB;\n\n    gl_FragColor = vec4(inherentColor * sunFactor, 1.0);\n}\n'},function(e,n,t){"use strict";t.r(n);var o=t(0),i=t.n(o);AFRAME.registerGeometry("atoll-terrain",{schema:{buffer:{type:"boolean",default:!1},meanElevation:{type:"number",default:10},plateauRadius:{type:"number",default:10,min:0},plateauElevation:{type:"number",default:1},plateauYinColor:{type:"color",default:void 0},plateauYangColor:{type:"color",default:void 0},middleRadius:{type:"number",default:100,min:10},unitSize:{type:"number",default:1,min:.1,max:1e3},far:{type:"number",default:4e3},landYinColor:{type:"color",default:"#528d04"},landYangColor:{type:"color",default:"#278d53"},seaYinColor:{type:"color",default:"#005e85"},seaYangColor:{type:"color",default:"#2571cf"},log:{type:"boolean",default:!1}},init:function(e){const n=new i.a,t=100*Math.random(),o=Math.sqrt(3)/2,r=Math.round(e.middleRadius/e.unitSize),a=e.middleRadius/r,l=e.plateauRadius<e.middleRadius-2*a?e.plateauRadius:e.middleRadius-2*a,s=l+a,u=(r-1)*a+1e-4,d=(r+1)*a+1e-4,c=e.far>d?e.far:d,f=u/4,m=Math.ceil(1.16*r),p=new THREE.Color(e.landYinColor),v=new THREE.Color(e.landYangColor),x=new THREE.Color(e.plateauYinColor?e.plateauYinColor:e.landYinColor),y=new THREE.Color(e.plateauYangColor?e.plateauYangColor:e.landYangColor),g=new THREE.Color(e.seaYinColor),h=new THREE.Color(e.seaYangColor);let E=g.clone();E.lerp(h,.5);const C=new THREE.Color(7430491),R=new THREE.Color(8617596);e.log&&console.log("atoll-terrain","PLATEAU_EDGE="+s,"plateauElevation="+e.plateauElevation,"SIZE="+r,"SCAN_SIZE="+m,"UNIT_SIZE="+a,"middleRadius="+e.middleRadius,"FAR="+c);let b=[],M=[],w={};w[-m-1]={};let z=0;for(let i=-m;i<=m;++i){w[i]={};for(let r=-m;r<=m;++r){let l=i*o*a,m=(r-i/2)*a,p=Math.sqrt(l*l+m*m);if(p<=d){let o;if(e.plateauRadius>0&&p<=s)o=e.plateauElevation;else if(p<=u){o=e.meanElevation;for(let i=25;i<=1500;i*=5)o+=n.noise((l+e.middleRadius)/i,(m+e.middleRadius)/i,t)*Math.min(i/2,150);if(e.plateauRadius>0&&(o=e.plateauElevation+(o-e.plateauElevation)*Math.min(p-s,f)/f),(o*=Math.min(u-p,f)/f)>0){let i=5;o+=n.noise((l+e.middleRadius)/i,(m+e.middleRadius)/i,t)*i/2}o<0&&(o=0)}else p<=e.middleRadius?o=0:(l*=c/p,m*=c/p,o=0);w[i][r]=z++,b.push(new THREE.Vector3(l,o,m)),M.push(l,o,m)}}}w[m+1]={};let A=new THREE.Color(4210752);A.lerp(p,.75);const P=5*a,T=25*a,S=3*a,Y=12*a;let H=[];let F=new Array(b.length),O=[];for(let o=-m;o<=m;++o)for(let i=-m;i<=m;++i){let r=w[o][i],a=b[r];if(a){let s=Math.sqrt(a.x*a.x+a.z*a.z),d=w[o][i-1],f=w[o-1][i-1],m=w[o-1][i];if(e.plateauRadius>0&&s<l&&(e.plateauYinColor||e.plateauYangColor)){let o=(1.73205+n.noise((a.x+e.middleRadius)/S,(a.z+e.middleRadius)/S,t)+n.noise((a.x+e.middleRadius)/Y,(a.z+e.middleRadius)/Y,t))/3.4641,i=x.clone();i.lerp(y,o),H.push(i.r,i.g,i.b),F[r]=a.y>0?0:10}else if(a.y>0){let l=new Array(6);l[0]=b[d],l[1]=b[f],l[2]=b[m],l[3]=b[w[o][i+1]],l[4]=b[w[o+1][i+1]],l[5]=b[w[o+1][i]];let s=new Array(12);s[0]=b[w[o][i-2]],s[1]=b[w[o-1][i-2]],s[2]=b[w[o-2][i-2]],s[3]=b[w[o-2][i-1]],s[4]=b[w[o-2][i]],s[5]=b[w[o-1][i+1]],s[6]=b[w[o][i+2]],s[7]=b[w[o+1][i+2]],s[8]=b[w[o+2][i+2]],s[9]=b[w[o+2][i+1]],s[10]=b[w[o+2][i]],s[11]=b[w[o+1][i-1]];let u=7*a.y;for(let e=0;e<6;++e)u+=3*l[e].y;for(let e=0;e<12;++e)u+=-2*s[e].y;if(u>70)H.push(R.r,R.g,R.b);else{let o=(1.73205+n.noise((a.x+e.middleRadius)/P,(a.z+e.middleRadius)/P,t)+n.noise((a.x+e.middleRadius)/T,(a.z+e.middleRadius)/T,t))/3.4641,i=p.clone();i.lerp(v,o),H.push(i.r,i.g,i.b)}F[r]=0}else if(s>u)H.push(E.r,E.g,E.b),F[r]=10;else{let e=[];e[0]=b[d],e[1]=b[f],e[2]=b[m],e[3]=b[w[o][i+1]],e[4]=b[w[o+1][i+1]],e[5]=b[w[o+1][i]];let l=0,s=0;for(let n=0;n<6;++n)e[n]&&(e[n].y>0?++l:++s);if(0===l){let e=(1.73205+n.noise((a.x+c)/S,(a.z+c)/S,t)+n.noise((a.x+c)/Y,(a.z+c)/Y,t))/3.4641,o=g.clone();o.lerp(h,e),H.push(o.r,o.g,o.b),F[r]=10}else if(0===s)H.push(A.r,A.g,A.b),F[r]=0;else{let e=C.clone();e.lerp(p,l/(l+s)),H.push(e.r,e.g,e.b),F[r]=0}}void 0!==d&&void 0!==f&&O.push(r,d,f),void 0!==f&&void 0!==m&&O.push(r,f,m)}}let _=new THREE.BufferGeometry;_.setIndex(O),_.addAttribute("position",new THREE.Float32BufferAttribute(M,3)),_.computeVertexNormals(),_.addAttribute("color",new THREE.Float32BufferAttribute(H,3)),_.addAttribute("behavior",new THREE.Float32BufferAttribute(F,1)),this.geometry=_,e.getElevation=((e,n)=>{const t=e/o/a,i=(n+e/o/2)/a,r=[];let l;w[Math.floor(t)]&&(l=w[Math.floor(t)][Math.floor(i)])&&r.push(b[l]),w[Math.floor(t)]&&(l=w[Math.floor(t)][Math.ceil(i)])&&r.push(b[l]),w[Math.ceil(t)]&&(l=w[Math.ceil(t)][Math.floor(i)])&&r.push(b[l]),w[Math.ceil(t)]&&(l=w[Math.ceil(t)][Math.ceil(i)])&&r.push(b[l]);let s=0,u=0;return r.forEach(t=>{let o=1-Math.sqrt(Math.pow(e-t.x,2)+Math.pow(n-t.z,2))/a;o<0&&(o=0),s+=t.y*o,u+=o}),u>0?s/u:0})}});var r=t(1),a=t.n(r),l=t(2),s=t.n(l);AFRAME.registerShader("vertex-color+noise",{schema:{sunPosition:{type:"vec3",default:{x:-1,y:1,z:-1}},timeMsec:{type:"time",is:"uniform"}},init:function(e){let n=new THREE.Vector3(e.sunPosition.x,e.sunPosition.y,e.sunPosition.z);this.material=new THREE.ShaderMaterial({uniforms:{sunNormal:{value:n.normalize()},wavesOffset:{type:"vec3",value:{x:0,y:0,z:0}}},vertexShader:a.a,fragmentShader:s.a})},update:function(e){if(e.sunPosition){let n=new THREE.Vector3(e.sunPosition.x,e.sunPosition.y,e.sunPosition.z);this.material.uniforms.sunNormal.value=n.normalize()}if(e.timeMsec){let n=e.timeMsec/1e3;this.material.uniforms.wavesOffset.value=new THREE.Vector3(Math.sin(n),0,Math.cos(1.33333*n))}}}),AFRAME.registerPrimitive("a-atoll-terrain",{defaultComponents:{geometry:{primitive:"atoll-terrain",middleRadius:100,unitSize:1,log:!1},material:{shader:"vertex-color+noise",vertexColors:"vertex"}},mappings:{"mean-elevation":"geometry.meanElevation","plateau-radius":"geometry.plateauRadius","plateau-elevation":"geometry.plateauElevation","plateau-yin-color":"geometry.plateauYinColor","plateau-yang-color":"geometry.plateauYangColor","middle-radius":"geometry.middleRadius","unit-size":"geometry.unitSize",far:"geometry.far",log:"geometry.log",shader:"material.shader","land-yin-color":"geometry.landYinColor","land-yang-color":"geometry.landYangColor","sea-yin-color":"geometry.seaYinColor","sea-yang-color":"geometry.seaYangColor","sun-position":"material.sunPosition",src:"material.src","flat-shading":"material.flatShading"}})}]);
//# sourceMappingURL=aframe-atoll-terrain.js.map