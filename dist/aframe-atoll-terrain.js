!function(e){var n={};function o(r){if(n[r])return n[r].exports;var t=n[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.m=e,o.c=n,o.d=function(e,n,r){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)o.d(r,t,function(n){return e[n]}.bind(null,t));return r},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=3)}([function(e,n){e.exports=function(){for(var e=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],n=0;n<256;n++)e[256+n]=e[n];function o(e){return e*e*e*(e*(6*e-15)+10)}function r(e,n,o){return n+e*(o-n)}function t(e,n,o,r){var t=15&e,i=t<8?n:o,s=t<4?o:12==t||14==t?n:r;return(0==(1&t)?i:-i)+(0==(2&t)?s:-s)}return{noise:function(n,i,s){var l=~~n,a=~~i,c=~~s,v=255&l,x=255&a,d=255&c,u=(n-=l)-1,m=(i-=a)-1,y=(s-=c)-1,p=o(n),f=o(i),g=o(s),h=e[v]+x,C=e[h]+d,z=e[h+1]+d,b=e[v+1]+x,w=e[b]+d,E=e[b+1]+d;return r(g,r(f,r(p,t(e[C],n,i,s),t(e[w],u,i,s)),r(p,t(e[z],n,m,s),t(e[E],u,m,s))),r(f,r(p,t(e[C+1],n,i,y),t(e[w+1],u,i,s-1)),r(p,t(e[z+1],n,m,y),t(e[E+1],u,m,y))))}}}},function(e,n){e.exports="// vertex-color+noise-vert.glsl - vertex shader\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n\nuniform vec3 sunNormal;\n\nvarying vec3 interpColor;\nvarying vec3 interpPosition;\nvarying float sunFactor;\n\nvoid main() {\n    interpColor = color;\n    interpPosition = position;\n\n    sunFactor = 0.5 + max(dot(normal, sunNormal), 0.0);\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n"},function(e,n){e.exports='// vertex-color+noise-frag.glsl - fragment shader\n// Copyright © 2019 P. Douglas Reeder under the MIT License, except as noted\n\nvarying vec3 interpColor;\nvarying vec3 interpPosition;\nvarying float sunFactor;\n\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i);\n    vec4 p = permute( permute( permute(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n    dot(p2,x2), dot(p3,x3) ) );\n}\n// end Ashima Arts copyright\n\n\n// by "sam" of "lolengine"\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n// end "sam" of "lolengine"\n\n\nvoid main() {\n    vec3 hsv = rgb2hsv(interpColor);\n\n    float noise = snoise(interpPosition) /* + snoise(interpPosition*10.0) */;\n    const vec2 landDivisor = vec2(30.0, 10.0);\n    const vec2 seaDivisor = vec2(200.0, 30.0);\n    hsv.xy += noise / (interpPosition.y > 1.0 ? landDivisor : seaDivisor);\n\n    vec3 inherentColor = hsv2rgb(hsv);\n\n    gl_FragColor = vec4(inherentColor * sunFactor, 1.0);\n}\n'},function(e,n,o){"use strict";o.r(n);var r=o(0),t=o.n(r);AFRAME.registerGeometry("atoll-terrain",{schema:{middleRadius:{type:"number",default:100,min:10},unitSize:{type:"number",default:1,min:.1,max:1e3},far:{type:"number",default:4e3},landYinColor:{type:"color",default:"#528d04"},landYangColor:{type:"color",default:"#278d53"},seaYinColor:{type:"color"},seaYangColor:{type:"color"},log:{type:"boolean",default:!1}},init:function(e){const n=new t.a,o=100*Math.random(),r=Math.sqrt(3)/2,i=Math.round(e.middleRadius/e.unitSize),s=e.middleRadius/i,l=(i-1)*s+1e-4,a=(i+1)*s+1e-4,c=e.far>a?e.far:a,v=l/4,x=Math.ceil(1.16*i),d=new THREE.Color(e.landYinColor),u=new THREE.Color(e.landYangColor),m=new THREE.Color(e.seaYinColor),y=new THREE.Color(e.seaYangColor);let p=m.clone();p.lerp(y,.5),e.log&&console.log("atoll-terrain","SIZE="+i,"SCAN_SIZE="+x,"UNIT_SIZE="+s,"middleRadius="+e.middleRadius,"FAR="+c);let f=new THREE.Geometry,g={};g[-x-1]={};let h=0;for(let t=-x;t<=x;++t){g[t]={};for(let i=-x;i<=x;++i){let x=t*r*s,d=(i-t/2)*s,u=Math.sqrt(x*x+d*d);if(u<=a){let r;if(u<=l){r=10;for(let t=25;t<=1500;t*=5)r+=n.noise((x+e.middleRadius)/t,(d+e.middleRadius)/t,o)*Math.min(t/2,150);if((r*=Math.min(l-u,v)/v)>0){let t=5;r+=n.noise((x+e.middleRadius)/t,(d+e.middleRadius)/t,o)*t/2}r<0&&(r=0)}else u<=e.middleRadius?r=0:(x*=c/u,d*=c/u,r=0);g[t][i]=h++,f.vertices.push(new THREE.Vector3(x,r,d))}}}g[x+1]={};let C=new THREE.Color(4210752);C.lerp(d,.75);const z=5*s,b=25*s,w=3*s,E=12*s;let R={};for(let r=-x;r<=x;++r){R[r]={};for(let t=-x;t<=x;++t){let i=f.vertices[g[r][t]];if(i)if(i.y>0){let s=(1.73205+n.noise((i.x+e.middleRadius)/z,(i.z+e.middleRadius)/z,o)+n.noise((i.x+e.middleRadius)/b,(i.z+e.middleRadius)/b,o))/3.4641,l=d.clone();R[r][t]=l.lerp(u,s)}else{if(Math.sqrt(i.x*i.x+i.z*i.z)>l)R[r][t]=p;else{let e=[];e[0]=f.vertices[g[r][t-1]],e[1]=f.vertices[g[r-1][t-1]],e[2]=f.vertices[g[r-1][t]],e[3]=f.vertices[g[r][t+1]],e[4]=f.vertices[g[r+1][t+1]],e[5]=f.vertices[g[r+1][t]];let s=0,l=0;for(let n=0;n<6;++n)e[n]&&(e[n].y>0?++s:++l);if(0===s){let e=(1.73205+n.noise((i.x+c)/w,(i.z+c)/w,o)+n.noise((i.x+c)/E,(i.z+c)/E,o))/3.4641,s=m.clone();R[r][t]=s.lerp(y,e)}else if(0===l)R[r][t]=C;else{let e=new THREE.Color(7430491);e.lerp(d,s/(s+l)),R[r][t]=e}}}}}for(let e=-x;e<=x;++e)for(let n=-x;n<=x;++n){let o=g[e][n];if(f.vertices[o]){let r=g[e][n-1],t=g[e-1][n-1],i=g[e-1][n];if(void 0!==r&&void 0!==t){let i=new THREE.Face3(o,r,t);i.vertexColors[0]=R[e][n],i.vertexColors[1]=R[e][n-1],i.vertexColors[2]=R[e-1][n-1],f.faces.push(i)}if(void 0!==t&&void 0!==i){let r=new THREE.Face3(o,t,i);r.vertexColors[0]=R[e][n],r.vertexColors[1]=R[e-1][n-1],r.vertexColors[2]=R[e-1][n],f.faces.push(r)}}}f.computeBoundingBox(),f.mergeVertices(),f.computeFaceNormals(),f.computeVertexNormals(),this.geometry=f}});var i=o(1),s=o.n(i),l=o(2),a=o.n(l);AFRAME.registerShader("vertex-color+noise",{schema:{sunPosition:{type:"vec3",default:{x:-1,y:1,z:-1}}},init:function(e){let n=new THREE.Vector3(e.sunPosition.x,e.sunPosition.y,e.sunPosition.z);this.material=new THREE.ShaderMaterial({uniforms:{sunNormal:{value:n.normalize()}},vertexShader:s.a,fragmentShader:a.a})},update:function(e){let n=new THREE.Vector3(e.sunPosition.x,e.sunPosition.y,e.sunPosition.z);this.material.uniforms.sunNormal.value=n.normalize()}}),AFRAME.registerPrimitive("a-atoll-terrain",{defaultComponents:{geometry:{primitive:"atoll-terrain",middleRadius:100,unitSize:1,log:!1},material:{shader:"vertex-color+noise",vertexColors:"vertex"}},mappings:{"middle-radius":"geometry.middleRadius","unit-size":"geometry.unitSize",far:"geometry.far",log:"geometry.log",shader:"material.shader","land-yin-color":"geometry.landYinColor","land-yang-color":"geometry.landYangColor","sea-yin-color":"geometry.seaYinColor","sea-yang-color":"geometry.seaYangColor","sun-position":"material.sunPosition",src:"material.src","flat-shading":"material.flatShading"}})}]);
//# sourceMappingURL=aframe-atoll-terrain.js.map