!function(e){var n={};function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=3)}([function(e,n){e.exports=function(){for(var e=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],n=0;n<256;n++)e[256+n]=e[n];function o(e){return e*e*e*(e*(6*e-15)+10)}function t(e,n,o){return n+e*(o-n)}function r(e,n,o,t){var r=15&e,i=r<8?n:o,a=r<4?o:12==r||14==r?n:t;return(0==(1&r)?i:-i)+(0==(2&r)?a:-a)}return{noise:function(n,i,a){var l=~~n,s=~~i,c=~~a,u=255&l,d=255&s,x=255&c,m=(n-=l)-1,f=(i-=s)-1,v=(a-=c)-1,p=o(n),y=o(i),g=o(a),h=e[u]+d,C=e[h]+x,R=e[h+1]+x,E=e[u+1]+d,b=e[E]+x,z=e[E+1]+x;return t(g,t(y,t(p,r(e[C],n,i,a),r(e[b],m,i,a)),t(p,r(e[R],n,f,a),r(e[z],m,f,a))),t(y,t(p,r(e[C+1],n,i,v),r(e[b+1],m,i,a-1)),t(p,r(e[R+1],n,f,v),r(e[z+1],m,f,v))))}}}},function(e,n){e.exports="// vertex-color+noise-vert.glsl - vertex shader\n// Copyright © 2019 P. Douglas Reeder under the MIT License\n\nuniform vec3 sunNormal;\n\nvarying vec3 interpColor;\nvarying vec3 interpPosition;\nvarying float sunFactor;\n\nvoid main() {\n    interpColor = color;\n    interpPosition = position;\n\n    sunFactor = 0.5 + max(dot(normal, sunNormal), 0.0);\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n"},function(e,n){e.exports='// vertex-color+noise-frag.glsl - fragment shader\n// Copyright © 2019 P. Douglas Reeder under the MIT License, except as noted\n\nvarying vec3 interpColor;\nvarying vec3 interpPosition;\nvarying float sunFactor;\n\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n    0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n    -0.577350269189626,  // -1.0 + 2.0 * C.x\n    0.024390243902439); // 1.0 / 41.0\n    // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n// end Ashima Arts copyright\n\n\n// by "sam" of "lolengine", apparently Public Domain\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n// end "sam" of "lolengine"\n\n\nvoid main() {\n    float noise = snoise(interpPosition.xz) /* + snoise(interpPosition.xz*10.0) */;\n\n    const vec3 factor = vec3(1.0/65.0, 1.0/19.0, 1.0/6.55e4);\n    const vec3 offsetHSV = vec3(0.5, 0.5, 0.5);\n    vec3 noiseHSV = noise * factor + offsetHSV;\n\n    const vec3 offsetRGB = vec3(0.25, 0.5, 0.5);\n    vec3 inherentColor = interpColor + hsv2rgb(noiseHSV) - offsetRGB;\n\n    gl_FragColor = vec4(inherentColor * sunFactor, 1.0);\n}\n'},function(e,n,o){"use strict";o.r(n);var t=o(0),r=o.n(t);AFRAME.registerGeometry("atoll-terrain",{schema:{middleRadius:{type:"number",default:100,min:10},unitSize:{type:"number",default:1,min:.1,max:1e3},far:{type:"number",default:4e3},landYinColor:{type:"color",default:"#528d04"},landYangColor:{type:"color",default:"#278d53"},seaYinColor:{type:"color"},seaYangColor:{type:"color"},log:{type:"boolean",default:!1}},init:function(e){const n=new r.a,o=100*Math.random(),t=Math.sqrt(3)/2,i=Math.round(e.middleRadius/e.unitSize),a=e.middleRadius/i,l=(i-1)*a+1e-4,s=(i+1)*a+1e-4,c=e.far>s?e.far:s,u=l/4,d=Math.ceil(1.16*i),x=new THREE.Color(e.landYinColor),m=new THREE.Color(e.landYangColor),f=new THREE.Color(e.seaYinColor),v=new THREE.Color(e.seaYangColor);let p=f.clone();p.lerp(v,.5);const y=new THREE.Color(7430491);e.log&&console.log("atoll-terrain","SIZE="+i,"SCAN_SIZE="+d,"UNIT_SIZE="+a,"middleRadius="+e.middleRadius,"FAR="+c);let g=new THREE.Geometry,h={};h[-d-1]={};let C=0;for(let r=-d;r<=d;++r){h[r]={};for(let i=-d;i<=d;++i){let d=r*t*a,x=(i-r/2)*a,m=Math.sqrt(d*d+x*x);if(m<=s){let t;if(m<=l){t=10;for(let r=25;r<=1500;r*=5)t+=n.noise((d+e.middleRadius)/r,(x+e.middleRadius)/r,o)*Math.min(r/2,150);if((t*=Math.min(l-m,u)/u)>0){let r=5;t+=n.noise((d+e.middleRadius)/r,(x+e.middleRadius)/r,o)*r/2}t<0&&(t=0)}else m<=e.middleRadius?t=0:(d*=c/m,x*=c/m,t=0);h[r][i]=C++,g.vertices.push(new THREE.Vector3(d,t,x))}}}h[d+1]={};let R=new THREE.Color(4210752);R.lerp(x,.75);const E=5*a,b=25*a,z=3*a,w=12*a;let P={};for(let t=-d;t<=d;++t){P[t]={};for(let r=-d;r<=d;++r){let i=g.vertices[h[t][r]];if(i)if(i.y>0){let a=(1.73205+n.noise((i.x+e.middleRadius)/E,(i.z+e.middleRadius)/E,o)+n.noise((i.x+e.middleRadius)/b,(i.z+e.middleRadius)/b,o))/3.4641,l=x.clone();P[t][r]=l.lerp(m,a)}else{if(Math.sqrt(i.x*i.x+i.z*i.z)>l)P[t][r]=p;else{let e=[];e[0]=g.vertices[h[t][r-1]],e[1]=g.vertices[h[t-1][r-1]],e[2]=g.vertices[h[t-1][r]],e[3]=g.vertices[h[t][r+1]],e[4]=g.vertices[h[t+1][r+1]],e[5]=g.vertices[h[t+1][r]];let a=0,l=0;for(let n=0;n<6;++n)e[n]&&(e[n].y>0?++a:++l);if(0===a){let e=(1.73205+n.noise((i.x+c)/z,(i.z+c)/z,o)+n.noise((i.x+c)/w,(i.z+c)/w,o))/3.4641,a=f.clone();P[t][r]=a.lerp(v,e)}else if(0===l)P[t][r]=R;else{let e=y.clone();e.lerp(x,a/(a+l)),P[t][r]=e}}}}}for(let e=-d;e<=d;++e)for(let n=-d;n<=d;++n){let o=h[e][n];if(g.vertices[o]){let t=h[e][n-1],r=h[e-1][n-1],i=h[e-1][n];if(void 0!==t&&void 0!==r){let i=new THREE.Face3(o,t,r);i.vertexColors[0]=P[e][n],i.vertexColors[1]=P[e][n-1],i.vertexColors[2]=P[e-1][n-1],g.faces.push(i)}if(void 0!==r&&void 0!==i){let t=new THREE.Face3(o,r,i);t.vertexColors[0]=P[e][n],t.vertexColors[1]=P[e-1][n-1],t.vertexColors[2]=P[e-1][n],g.faces.push(t)}}}g.computeBoundingBox(),g.mergeVertices(),g.computeFaceNormals(),g.computeVertexNormals(),this.geometry=g}});var i=o(1),a=o.n(i),l=o(2),s=o.n(l);AFRAME.registerShader("vertex-color+noise",{schema:{sunPosition:{type:"vec3",default:{x:-1,y:1,z:-1}}},init:function(e){let n=new THREE.Vector3(e.sunPosition.x,e.sunPosition.y,e.sunPosition.z);this.material=new THREE.ShaderMaterial({uniforms:{sunNormal:{value:n.normalize()}},vertexShader:a.a,fragmentShader:s.a})},update:function(e){let n=new THREE.Vector3(e.sunPosition.x,e.sunPosition.y,e.sunPosition.z);this.material.uniforms.sunNormal.value=n.normalize()}}),AFRAME.registerPrimitive("a-atoll-terrain",{defaultComponents:{geometry:{primitive:"atoll-terrain",middleRadius:100,unitSize:1,log:!1},material:{shader:"vertex-color+noise",vertexColors:"vertex"}},mappings:{"middle-radius":"geometry.middleRadius","unit-size":"geometry.unitSize",far:"geometry.far",log:"geometry.log",shader:"material.shader","land-yin-color":"geometry.landYinColor","land-yang-color":"geometry.landYangColor","sea-yin-color":"geometry.seaYinColor","sea-yang-color":"geometry.seaYangColor","sun-position":"material.sunPosition",src:"material.src","flat-shading":"material.flatShading"}})}]);
//# sourceMappingURL=aframe-atoll-terrain.js.map